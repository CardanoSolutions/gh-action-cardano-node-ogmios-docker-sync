name: cardano-node-ogmios-docker-sync
description: Synchronize cardano-node-ogmios using Docker
branding:
  icon: 'refresh-ccw'
  color: 'blue'
inputs:
  container-name:
    description: Docker container name
    required: false
    default: cardano-node-ogmios
  db-dir:
    description: Path to the host db mount
    required: true
  network:
    description: Cardano network
    required: true
  ogmios-port:
    description: Mapped host Ogmios port
    required: false
    default: '1337'
  repository:
    description: Docker repository
    required: false
    default: cardanosolutions/cardano-node-ogmios
  version:
    description: Ogmios version
    required: false
    default: latest
  synchronization-level:
    description: A percentage between 0 and 1 of the target synchronization level.
    required: false
    default: 1
runs:
  using: composite
  steps:
    - name: ðŸ”µ Set Docker Image
      id: docker-image
      shell: bash
      run: |
        echo "image=${{ inputs.repository }}:${{ inputs.version }}-${{ inputs.network }}" >> $GITHUB_OUTPUT

    - name: ðŸ“¥ Pull Image
      run: |
        docker pull ${{ steps.docker-image.outputs.image }}
      shell: bash

    - name: âŸ² Sync
      shell: bash
      env:
        OGMIOS_PORT: ${{ inputs.ogmios-port }}
        THRESHOLD: ${{ inputs.synchronization-level }}
      run: |
        set -eo pipefail
        docker run -d --name ${{ inputs.container-name }} -p ${{ inputs.ogmios-port }}:1337 -v ${{ inputs.db-dir }}:/db ${{ steps.docker-image.outputs.image }}
        sleep 10
        URL=http://localhost:$OGMIOS_PORT/health
        echo "Begin synchronization, target: $THRESHOLD"
        echo -n ""
        for (( ;; ))
        do
          HEALTH=$(curl -sS $URL)
          NETWORK_SYNCHRONIZATION=$(sed 's/.*"networkSynchronization":\([0-9]\+\.\?[0-9]*\).*/\1/' <<< $HEALTH)

          RE='^[0-9]+\.?[0-9]*$'
          if ! [[ $NETWORK_SYNCHRONIZATION =~ $RE ]] ; then
            if [[ $HEALTH == *"\"networkSynchronization\":null"* ]]; then
              echo -ne "\rServer isn't ready..."
              sleep 5
              continue
            else
              echo "error: unexpected response from /health endpoint: $HEALTH"
              exit 1
            fi
          fi

          echo -ne "\rnetwork synchronization: $NETWORK_SYNCHRONIZATION"
          PREDICATE=$(bc <<< "$NETWORK_SYNCHRONIZATION >= $THRESHOLD")

          if [ "$PREDICATE" -eq 1 ]; then
            echo "Done."
            exit 0
          else
            sleep 5
          fi
        done

    - name: ðŸ§¹ Cleanup
      run: |
        docker stop ${{ inputs.container-name }}
        docker rm ${{ inputs.container-name }}
        docker rmi ${{ steps.docker-image.outputs.image }}
      shell: bash
